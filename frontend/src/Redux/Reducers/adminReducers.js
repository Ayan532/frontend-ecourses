import { createReducer } from "@reduxjs/toolkit";

export const adminReducer=createReducer({courses:[]},{
   
    AdminGetCourseRequest:(state)=>{
        state.loading=true;
      },
      AdminGetCourseSuccess:(state,action)=>{
        state.loading=false;
        state.courses=action.payload;
      },
      AdminGetCourseFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
      },
    CreateCourseRequest:(state)=>{
        state.loading=true;
      },
      CreateCourseSuccess:(state,action)=>{
        state.loading=false;
        state.message=action.payload;
      },
      CreateCourseFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
      },
   DeleteCourseRequest:(state)=>{
        state.loading=true;
      },
     DeleteCourseSuccess:(state,action)=>{
        state.loading=false;
        state.message=action.payload;
      },
     DeleteCourseFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
      },
   AddCourseLectureRequest:(state)=>{
        state.loading=true;
      },
     AddCourseLectureSuccess:(state,action)=>{
        state.loading=false;
        state.message=action.payload;
      },
     AddCourseLectureFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
      },
   DeleteCourseLectureRequest:(state)=>{
        state.loading=true;
      },
     DeleteCourseLectureSuccess:(state,action)=>{
        state.loading=false;
        state.message=action.payload;
      },
     DeleteCourseLectureFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
      },
   GetAllUsersRequest:(state)=>{
        state.loading=true;
      },
     GetAllUsersSuccess:(state,action)=>{
        state.loading=false;
        state.users=action.payload;
      },
     GetAllUsersFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
      },
   DeleteUsersRequest:(state)=>{
        state.loading=true;
      },
     DeleteUsersSuccess:(state,action)=>{
        state.loading=false;
        state.message=action.payload;
      },
     DeleteUsersFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
      },
      GetAdminStatsRequest:(state)=>{
        state.loading=true;
      },
      GetAdminStatsSuccess:(state,action)=>{
        state.loading=false;
        state.stats=action.payload.stats;
        state.usersCount=action.payload.usersCount;
        state.subcriptionCount=action.payload.subcriptionCount;
        state.viewsCount=action.payload.viewsCount;
        state.subscriptionsPercentage=action.payload.subscriptionsPercentage;
        state.viewsPercentage=action.payload.viewsPercentage;
        state.userPercentage=action.payload.userPercentage;
        state.userProfit=action.payload.userProfit;
        state.viewsProfit=action.payload.viewsProfit;
        state.subscriptionProfit=action.payload.subscriptionProfit;
      },
      GetAdminStatsFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
      },
      RequestCourseRequest:(state)=>{
        state.loading=true;
      },
     RequestCourseSuccess:(state,action)=>{
        state.loading=false;
        state.message=action.payload;
      },
     RequestCourseFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
      },
      GetRequestCourseRequest:(state)=>{
        state.loading=true;
      },
     GetRequestCourseSuccess:(state,action)=>{
        state.loading=false;
        state.request=action.payload;
      },
     GetRequestCourseFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
      },
      DeleteRequestCourseRequest:(state)=>{
        state.loading=true;
      },
      DeleteRequestCourseSuccess:(state,action)=>{
        state.loading=false;
        state.message=action.payload;
      },
     DeleteRequestCourseFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
      },

      clearError:(state)=>{
        state.error=null
    },
     clearMessage:(state)=>{
        state.message=null
    }

})
